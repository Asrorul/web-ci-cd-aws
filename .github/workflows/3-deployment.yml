name: "3-Deployment"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: choice
        description: Select deployment environment
        options:
          - Staging
          - Production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          # Get the service ID based on environment
          SERVICE_ID="${{ inputs.environment == 'Production' && secrets.RENDER_PROD_SERVICE_ID || secrets.RENDER_STAGING_SERVICE_ID }}"
          
          # Trigger deploy using Render API
          curl -X POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
            -H "accept: application/json" \
            -H "authorization: Bearer $RENDER_API_KEY" \
            -H "content-type: application/json" \
            -d '{
              "imageTag": "${{ github.sha }}",
              "clearCache": "do_not_clear"
            }'

      - name: Wait for Deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          SERVICE_ID="${{ inputs.environment == 'Production' && secrets.RENDER_PROD_SERVICE_ID || secrets.RENDER_STAGING_SERVICE_ID }}"
          
          echo "Waiting for deployment to complete..."
          while true; do
            STATUS=$(curl -s -H "authorization: Bearer $RENDER_API_KEY" \
                        "https://api.render.com/v1/services/$SERVICE_ID" \
                        | jq -r '.state')
            
            echo "Current status: $STATUS"
            
            if [ "$STATUS" = "live" ]; then
              echo " Deployment successful!"
              break
            elif [ "$STATUS" = "failed" ]; then
              echo " Deployment failed!"
              exit 1
            fi
            
            sleep 10
          done
